<?php
// $Id$
/* Copyright (C) 2011  Jeff Lyon, NYC Public Advocate, <jeff@albatrossdigital.com>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
 
include_once('landlord_watchlist.features.inc');


function landlord_watchlist_coords(){
  return taxonomy_get_tree(1);
  
  /*return array(
    'Bronx' => '[gmap center=40.85563020812578,-73.88374328613281 |zoom=12 | width=auto ]',
    'Brooklyn' => '[gmap center=40.680117302362376,-73.92322540283203 |zoom=12 | width=auto ]',
    'Manhattan' => '[gmap center=40.8018555345511,-73.93112182617188 |zoom=11 | width=auto ]',
    'Queens' => '[gmap center=40.71916022743469,-73.80443572998047 |zoom=12 | width=auto ]',
    'Staten Island' => '[gmap center=40.586320936011056,-74.15153503417969 |zoom=12 | width=auto ]',
  );*/
}

function landlord_watchlist_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && strpos($form['#id'], 'views-exposed-form-landlord') !== FALSE){
    // Total infractions dropdown
    $form['infraction']['#type'] = 'select';
    unset($form['infraction']['#size']);
    $form['infraction']['#options'] = array(
      '' => 'Show all',
      100 => 'Over 100',
      500 => 'Over 500',
      1000 => 'Over 1,000',
    );
    
    // Submit button
    $form['submit']['#value'] = t('Search');
    
    // Reset button/link
    global $base_url;
    $form['reset'] = array(
      '#type' => 'markup',
      '#value' => '<div class="form-reset views-exposed-widget"><a href="#" onClick="javascript:window.location=\''. $base_url . url(arg(0)) . url(arg(1)) .'?t='. time() .'\';return false;">Show all</a></div>',
    );
    
    $form['#action'] = url('landlord-watchlist/buildings');
    
    //TEMP?
    unset($form['type']['#options']['Bedbugs']);
    //dpm($form);
  }
}


function landlord_watchlist_views_pre_build(&$view){
  if ($view->name == 'landlord_buildings'){
    // if filters are set, set page size to unlimited
    $empty = TRUE;
    foreach ($view->exposed_raw_input as $input){
      if ($input){
        $empty = FALSE;
      }
    }
    if (!$empty){
      $view->pager['items_per_page'] = 0;
    }
    

    // If there is a zoom level, change gmap object
    if ($view->current_display == 'page_1' && $_REQUEST['neighborhood'][0] && !$_REQUEST['neighborhood'][1]){
      //$coords = landlord_watchlist_coords();
      //dpm($coords);
      drupal_add_js(array('landlord_watchlist_coords' => $coords), 'setting');
      $node = node_load(_taxonomynode_get_nid_from_tid($_REQUEST['neighborhood'][0]));
      //dpm(_taxonomynode_get_nid_from_tid($_REQUEST['neighborhood'][0]));
      
      $gmap = '[gmap center='. $node->field_neighborhood_center[0]['value'] .' |zoom='. $node->field_neighborhood_zoom[0]['value'] .' | width=auto ]';
      //dpm($gmap);
      $view->display_handler->default_display->options['style_options']['macro'] = $gmap;
    }
  }
  

}

/**
 * Implementation of hook_views_pre_render
 */
function landlord_watchlist_views_pre_render(&$view) {
  
   /*if ($view->name == 'landlord_container' && $view->current_display == 'attachment_1'){
   $landlords = array();
    foreach ($view->result as $key=>$result){
      if (in_array($result->nid, $landlords)){
        //unset($view->result[$key]);
      } else {
        $landlords[] = $result->nid;
      }
    }
    dpm($view->result);
    dpm($landlords);
  }*/
  
  if ($view->name == 'landlord_container' && $view->current_display == 'page_1' && !$_REQUEST['keyword']) {
    unset ($view->result);
    //$view->result[] = $temp;
    /*for($i=1;$i<(sizeOf($view->result));$i++) {
      unset($view->result[$i]);
    }*/
  }
}

/**
 * Implementation of dcpl_misc_preprocess_views_view(&$vars)
 * Add neighborhood tabs to the top of the watchlist pages.
 */
function landlord_watchlist_preprocess_views_view(&$vars){ 

  if (strpos($vars['view']->name, 'landlord_') !== FALSE && $vars['view']->current_display == 'page_1'){

    $vars['classes'] .= ' view-landlords';

    if ($vars['view']->name == 'landlord_container' && !$vars['view']->result){
      $vars['rows'] = $vars['empty'];
    }
    
    //add tabs
    if ($vars['view']->name != 'landlord_stats'){ 
      $links = array();
      $url = 'landlord-watchlist/buildings';   
      $links[] = array('title' => t('50 Worst Landlords'), 'href' => 'landlord-watchlist' , 'fragment' => 'map');
      //dpm(landlord_watchlist_coords());
      foreach(landlord_watchlist_coords() as $term){
        $links[] = array('title' => $term->name . variable_get('watchlist_neighborhood_suffix', ' buildings'), 'href' => $url, 'query' => array('neighborhood[]'=> $term->tid), 'fragment' => 'map');
      }
      $links[] = array('title' => t('Tell us your story'), 'href' => 'landlord-watchlist/tell-us-your-story' , 'fragment' => 'map', 'class' => 'story');

      $tabs = theme('links', $links, array('class' => 'quicktabs_tabs quicktabs-style-sky'));
      $path = drupal_get_path('module', 'quicktabs');
         
      drupal_add_css($path .'/tabstyles/sky/sky.css', 'module');
      drupal_add_css($path .'/css/quicktabs.css', 'module');
      //drupal_add_js(drupal_get_path('module', 'landlord_watchlist') .'/jquery.scrollTo-min.js', 'module');
      drupal_add_js(drupal_get_path('module', 'landlord_watchlist') .'/landlord-watchlist.js', 'module');
      drupal_add_css(drupal_get_path('module', 'landlord_watchlist') .'/sky.css');
      drupal_add_css(drupal_get_path('module', 'landlord_watchlist') .'/landlord-watchlist.css');
      //drupal_add_js(drupal_get_path('theme')
      //print(drupal_get_path('theme', 'pubadvocate').'../../');
      
      $vars['header'] .= '<a name="map"></a>';
      $vars['rows'] = '<div class="quicktabs_wrapper quicktabs-style-sky">' . $tabs . '<div class="quicktabs_main quicktabs-style-sky">' . $vars['rows'] . '</div></div>';
    }
  }
}





/**
 * Implementation of hook_nodeapi().
 */
function landlord_watchlist_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'alter':
      break;
    case 'delete':
      // OPTIONAL: The node is being deleted.
      if ($node->type == 'landlord'){
        //_landlord_watchlist_delete_building($node->title, $node->nid, $container_type = 'Landlord', 'delete');
        //_landlord_watchlist_delete_building($node->locations[0]['postal_code'], $node->nid, $container_type = 'Zip Code', 'delete');
        //_landlord_watchlist_delete_building($node->taxonomy[1], $node->nid, $container_type = 'Neighborhood', 'delete');
      }
      break;
    case 'presave':
      switch ($node->type){
        case 'landlord':
            $nid = $node->nid;
            if (!$nid){
              $nid = db_result(db_query('SELECT max(nid) FROM {node};')) + 1;
            }
            $title = ($node->field_landlord_company[0]['value']) ? $node->field_landlord_company[0]['value'] : $node->title;
            _landlord_watchlist_add_building($title, $nid, $node, $container_type = 'Landlord');
            _landlord_watchlist_add_building($node->locations[0]['postal_code'], $nid, $node, $container_type = 'Zip Code');
            _landlord_watchlist_add_building($node->taxonomy[1], $nid, $node, $container_type = 'Neighborhood');
          //}
          break;
      }
      
      
      break;
    case 'update':
      break;
  }
}


/**
 * Add/update the container data.
 */
function _landlord_watchlist_add_building($title, $building_nid, $building, $container_type = 'Landlord'){
  if ($title){
    $container = _landlord_watchlist_select_container($title, $building_nid, $container_type);

    $in_array = FALSE;
    foreach ($container->field_landlord_nid as $value){

      if ($value['nid'] == $building_nid){
        $in_array = TRUE;
      }
    }
    
    // Add nid to field.
    if (!$in_array){
      $container->field_landlord_nid[]['nid'] = $building_nid;
    }
    
    // Update container
    $all_keys = array_keys((array)$building);
      // loop through all keys, get the "field_"s
      foreach ($all_keys as $key){
      if (strpos($key, 'field_') !== FALSE  && $key != 'field_landlord_container_type' && $key != 'field_landlord_nid' && $key != 'field_landlord_company' && $key != 'field_landlord_title'){
        $keys[] = $key;
        $container->{$key}[0]['value'] = 0;
      }
    }
    
    // loop through all nodes, sum them together
    foreach ($container->field_landlord_nid as $nid){
      if ($building_nid == $nid['nid']){
        $element = $building;
      } else {
        $element = node_load($nid['nid']);
      }
      if ($element->status){
        foreach ($keys as $key){
          $container->{$key}[0]['value'] += $element->{$key}[0]['value'];
        }
      }
    }
    
    // Update the number of buildings field
    $container->field_landord_num_building[0]['value'] = count($container->field_landlord_nid);
    module_load_include('inc', 'node', 'node.pages');
    node_save($container);
    
  } // if($title)
}


/**
 * Delete the containers associated with a landlord node.
 */
function _landlord_watchlist_delete_building($title, $building_nid, $container_type = 'Landlord'){
  if ($container = _landlord_watchlist_select_container($title, $building_nid, $container_type, FALSE)){
    // Unset the node reference field
    foreach ($container->field_landlord_nid as $key => $value){
      if ($value['nid'] == $building_nid){
        unset($container->field_landlord_nid[$key]);
      }
    }
    // Delete or update node
    if (sizeof($container->field_landlord_nid) == 0){
      node_delete($container->nid);
      
    } else {
      module_load_include('inc', 'node', 'node.pages');
      node_save($container);
    }
    
  }
}


/**
 * Selects the proper container to act on
 */
function _landlord_watchlist_select_container($title, $building_nid, $container_type = 'Landlord', $create_new = TRUE){
  if (!$container_nid = db_result(db_query('SELECT n.nid FROM {node} AS n WHERE n.type = "landlord_container" AND n.title = "%s";', $title))){
    if ($create_new){
      $container = _landlord_watchlist_add_node('landlord_container', $title, $building_nid, $container_type);
      $container_nid = $container->nid;
    } else {
      return $false;
    }
  } else {
    $container = node_load($container_nid);
  }
  return $container;
}

/**
 * Programmatically create node
 * From: http://thedrupalblog.com/programmatically-create-a-cck-node
 */
function _landlord_watchlist_add_node($type, $title, $building_nid, $container_type = FALSE){
  global $user;
  $newNode = (object) NULL;
  $newNode->type = $type;
  $newNode->title = $title;
  $newNode->uid = $user->uid;
  $newNode->created = strtotime("now");
  $newNode->changed = strtotime("now");
  $newNode->status = 1;
  $newNode->comment = 0;
  $newNode->promote = 0;
  $newNode->moderate = 0;
  $newNode->sticky = 0;
  if ($container_type){
    $newNode->field_landlord_container_type[0]['value'] = $container_type;
  }
  //dpm('new');
  
  return $newNode;
}


/**
 * Invoked after a feed source has been imported.
 *
 * @param $importer
 *   FeedsImporter object that has been used for importing the feed.
 * @param $source
 *  FeedsSource object that describes the source that has been imported.
 */
function landlord_watchlist_feeds_after_import($importer, $source) {
  drupal_clear_css_cache();
  
  // Clear caches
  $tables = array(
    'cache',
    'cache_content',
    'cache_page',
    'cache_views',
  );
  foreach ($tables as $table) {
    cache_clear_all('*', $table, TRUE);
  }
  
  
  //views_bulk_operations_execute('landlord_administration', 'node_save_action');
  drupal_cron_run();
  global $base_url;
  //drupal_set_message('Cache cleared.');
  drupal_set_message(t('Your data has been successfully imported.  We ran the cron job once, however, depending on your !status, it may need to be run again. You can run it manually by going to !cron', 
    array('!status' => l('search indexing status', 'admin/settings/search'), '!cron' => l($base_url . '/cron.php', 'cron.php')))
  );

}



/**
 * Implmentation of hook_menu();
 */
function landlord_watchlist_menu() {
 $items = array();
 $items['admin/landlord-watchlist/clear'] = array(
   'title' => 'Delete all entries',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('landlord_watchlist_clear_confirm'),
   'access arguments' => array('clear landlord_watchlist feeds'),
   'type' => MENU_NORMAL_ITEM,
  );

 return $items;
}


/**
 * Menu callback: ask for confirmation of relation deletion
 */
function landlord_watchlist_clear_confirm($form_state) {
  $form['#relation'] = $relation;
  // Always provide entity id in the same form key as in the entity edit form.
  return confirm_form($form,
    t('Are you sure you want to delete all of the Landlord entries?', array('%rid' => $relation->rid)),
    'admin/lanlord-watchlist/clear',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Execute relation deletion
 */
function landlord_watchlist_clear_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    views_bulk_operations_execute('landlord_administration', 'views_bulk_operations_delete_node_action');
    drupal_get_messages();
    drupal_set_message(t('All of your landlords have been deleted.'));
  }

  $form_state['redirect'] = 'admin/dashboard';
}


